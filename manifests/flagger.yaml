apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    helm.sh/resource-policy: keep
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: canaries.flagger.app
spec:
  additionalPrinterColumns:
  - JSONPath: .status.phase
    name: Status
    type: string
  - JSONPath: .status.canaryWeight
    name: Weight
    type: string
  - JSONPath: .status.lastTransitionTime
    name: LastTransitionTime
    type: string
  group: flagger.app
  names:
    categories:
    - all
    kind: Canary
    plural: canaries
    singular: canary
  scope: Namespaced
  validation:
    openAPIV3Schema:
      properties:
        spec:
          properties:
            autoscalerRef:
              anyOf:
              - type: string
              - type: object
              properties:
                apiVersion:
                  type: string
                kind:
                  type: string
                name:
                  type: string
              required:
              - apiVersion
              - kind
              - name
            canaryAnalysis:
              properties:
                interval:
                  pattern: ^[0-9]+(m|s)
                  type: string
                iterations:
                  type: number
                maxWeight:
                  type: number
                metrics:
                  properties:
                    items:
                      properties:
                        interval:
                          pattern: ^[0-9]+(m|s)
                          type: string
                        name:
                          type: string
                        query:
                          type: string
                        threshold:
                          type: number
                      required:
                      - name
                      - threshold
                      type: object
                  type: array
                stepWeight:
                  type: number
                threshold:
                  type: number
                webhooks:
                  properties:
                    items:
                      properties:
                        name:
                          type: string
                        timeout:
                          pattern: ^[0-9]+(m|s)
                          type: string
                        type:
                          enum:
                          - ""
                          - pre-rollout
                          - rollout
                          - post-rollout
                          type: string
                        url:
                          format: url
                          type: string
                      required:
                      - name
                      - url
                      - timeout
                      type: object
                  type: array
            ingressRef:
              anyOf:
              - type: string
              - type: object
              properties:
                apiVersion:
                  type: string
                kind:
                  type: string
                name:
                  type: string
              required:
              - apiVersion
              - kind
              - name
            progressDeadlineSeconds:
              type: number
            provider:
              type: string
            service:
              properties:
                meshName:
                  type: string
                port:
                  type: number
                portDiscovery:
                  type: boolean
                portName:
                  type: string
                timeout:
                  type: string
              required:
              - port
              type: object
            skipAnalysis:
              type: boolean
            targetRef:
              properties:
                apiVersion:
                  type: string
                kind:
                  type: string
                name:
                  type: string
              required:
              - apiVersion
              - kind
              - name
              type: object
          required:
          - targetRef
          - service
          - canaryAnalysis
        status:
          properties:
            canaryWeight:
              type: number
            failedChecks:
              type: number
            iterations:
              type: number
            lastAppliedSpec:
              type: string
            lastTransitionTime:
              type: string
            phase:
              enum:
              - ""
              - Initialized
              - Progressing
              - Succeeded
              - Failed
              type: string
  version: v1alpha3
  versions:
  - name: v1alpha3
    served: true
    storage: true
  - name: v1alpha2
    served: true
    storage: false
  - name: v1alpha1
    served: true
    storage: false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger-prometheus
  namespace: gloo-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger
rules:
- apiGroups:
  - ""
  resources:
  - events
  - configmaps
  - secrets
  - services
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - '*'
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - '*'
- apiGroups:
  - extensions
  resources:
  - ingresses
  - ingresses/status
  verbs:
  - '*'
- apiGroups:
  - flagger.app
  resources:
  - canaries
  - canaries/status
  verbs:
  - '*'
- apiGroups:
  - networking.istio.io
  resources:
  - virtualservices
  - virtualservices/status
  - destinationrules
  - destinationrules/status
  verbs:
  - '*'
- apiGroups:
  - appmesh.k8s.aws
  resources:
  - meshes
  - meshes/status
  - virtualnodes
  - virtualnodes/status
  - virtualservices
  - virtualservices/status
  verbs:
  - '*'
- apiGroups:
  - split.smi-spec.io
  resources:
  - trafficsplits
  verbs:
  - '*'
- apiGroups:
  - gloo.solo.io
  resources:
  - settings
  - upstreams
  - upstreamgroups
  - proxies
  - virtualservices
  verbs:
  - '*'
- apiGroups:
  - gateway.solo.io
  resources:
  - virtualservices
  - gateways
  verbs:
  - '*'
- nonResourceURLs:
  - /version
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger-prometheus
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - services
  - endpoints
  - pods
  - nodes/proxy
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flagger
subjects:
- kind: ServiceAccount
  name: flagger
  namespace: gloo-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger-prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flagger-prometheus
subjects:
- kind: ServiceAccount
  name: flagger-prometheus
  namespace: gloo-system
---
apiVersion: v1
data:
  flagger-prometheus-prometheus.yml: |-
    global:
      scrape_interval: 5s
    scrape_configs:

    # Scrape config for AppMesh Envoy sidecar
    - job_name: 'appmesh-envoy'
      metrics_path: /stats/prometheus
      kubernetes_sd_configs:
      - role: pod

      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: keep
        regex: '^envoy$'
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: ${1}:9901
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

      # Exclude high cardinality metrics
      metric_relabel_configs:
      - source_labels: [ cluster_name ]
        regex: '(outbound|inbound|prometheus_stats).*'
        action: drop
      - source_labels: [ tcp_prefix ]
        regex: '(outbound|inbound|prometheus_stats).*'
        action: drop
      - source_labels: [ listener_address ]
        regex: '(.+)'
        action: drop
      - source_labels: [ http_conn_manager_listener_prefix ]
        regex: '(.+)'
        action: drop
      - source_labels: [ http_conn_manager_prefix ]
        regex: '(.+)'
        action: drop
      - source_labels: [ __name__ ]
        regex: 'envoy_tls.*'
        action: drop
      - source_labels: [ __name__ ]
        regex: 'envoy_tcp_downstream.*'
        action: drop
      - source_labels: [ __name__ ]
        regex: 'envoy_http_(stats|admin).*'
        action: drop
      - source_labels: [ __name__ ]
        regex: 'envoy_cluster_(lb|retry|bind|internal|max|original).*'
        action: drop

    # Scrape config for API servers
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - default
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: kubernetes;https

    # Scrape config for nodes
    - job_name: 'kubernetes-nodes'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    # scrape config for cAdvisor
    - job_name: 'kubernetes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

    # scrape config for pods
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - source_labels: [ __address__ ]
        regex: '.*9901.*'
        action: drop
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger-prometheus-27m4c9f785
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger-prometheus
  namespace: gloo-system
spec:
  ports:
  - name: http
    port: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger-prometheus
  namespace: gloo-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: flagger
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: flagger
      helm.sh/chart: flagger-0.16.0
  template:
    metadata:
      annotations:
        appmesh.k8s.aws/sidecarInjectorWebhook: disabled
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/instance: flagger
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/name: flagger
        helm.sh/chart: flagger-0.16.0
    spec:
      containers:
      - args:
        - --storage.tsdb.retention=6h
        - --config.file=/etc/prometheus/prometheus.yml
        image: docker.io/prom/prometheus:v2.7.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
        name: prometheus
        ports:
        - containerPort: 9090
          name: http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
        resources:
          requests:
            cpu: 10m
            memory: 128Mi
        volumeMounts:
        - mountPath: /etc/prometheus
          name: config-volume
        - mountPath: /prometheus/data
          name: data-volume
      serviceAccountName: flagger-prometheus
      volumes:
      - configMap:
          name: flagger-prometheus
        name: config-volume
      - name: data-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: flagger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: flagger
    helm.sh/chart: flagger-0.16.0
  name: flagger
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: flagger
      app.kubernetes.io/managed-by: Tiller
      app.kubernetes.io/name: flagger
      helm.sh/chart: flagger-0.16.0
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: flagger
        app.kubernetes.io/managed-by: Tiller
        app.kubernetes.io/name: flagger
        helm.sh/chart: flagger-0.16.0
    spec:
      containers:
      - command:
        - ./flagger
        - -log-level=info
        - -mesh-provider=gloo
        - -metrics-server=http://flagger-prometheus:9090
        image: weaveworks/flagger:0.16.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - wget
            - --quiet
            - --tries=1
            - --timeout=4
            - --spider
            - http://localhost:8080/healthz
          timeoutSeconds: 5
        name: flagger
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          exec:
            command:
            - wget
            - --quiet
            - --tries=1
            - --timeout=4
            - --spider
            - http://localhost:8080/healthz
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 10m
            memory: 32Mi
        securityContext:
          readOnlyRootFilesystem: true
          runAsUser: 10001
      serviceAccountName: flagger
